{
    "negative_rETH_ratio_update_event": {
        "title": ":warning: Negative rETH Ratio Update",
        "description": "The rETH ratio has decreased from `%{prevRETHRate}` to `%{currRETHRate}`!"
    },
    "service_interrupted": {
        "title": ":warning: Failure in Event Processing",
        "description": "The developer has automatically been notified of this Error.\nNo further action is required."
    },
    "reth_burn_event": {
        "title": ":fire: rETH Burn",
        "description": "Burned **%{amount} rETH** for %{ethAmount} ETH!",
        "description_small": ":fire: %{fancy_from} burned **%{amount} rETH** for %{ethAmount} ETH! %{transactionHash_small}"
    },
    "node_merkle_rewards_claimed_rpl": {
        "title": ":moneybag: Major RPL Rewards Claim",
        "description": "%{claimer} claimed %{amountRPL} RPL (worth %{ethAmount} ETH)!"
    },
    "node_merkle_rewards_claimed_both": {
        "title": ":moneybag: Major Reward Claim",
        "description": "%{claimer} claimed %{amountRPL} RPL (worth %{ethAmount} ETH) and %{amountETH} ETH!"
    },
    "rpl_stake_event": {
        "title": ":moneybag: RPL Stake",
        "description": "%{from} staked **%{amount} RPL** (worth %{ethAmount} ETH)!"
    },
    "rpl_withdraw_event": {
        "title": ":leaves: RPL Withdrawal",
        "description": "%{to} withdrew **%{amount} RPL** (worth %{ethAmount} ETH)!"
    },
    "eth_deposit_event": {
        "title": ":moneybag: Node ETH Deposit",
        "description": "%{nodeAddress} deposited **%{amount} ETH** for their node!"
    },
    "eth_withdraw_event": {
        "title": ":leaves: Node ETH Withdrawal",
        "description": "%{nodeAddress} withdrew **%{amount} ETH** from their node!"
    },
    "pool_deposit_assigned_single_event": {
        "title": ":rocket: Deposit Assigned To Minipool",
        "description_small": ":handshake: Minipool %{minipool_clean} owned by Operator %{node} has been matched and left the queue! %{transactionHash_small}"
    },
    "odao_rpl_transfer": {
        "description_small": ":moneybag: %{from} transferred %{value} RPL to %{to}! %{transactionHash_small}"
    },
    "reth_transfer_event": {
        "title": ":whale: Large rETH Transfer",
        "description": "%{from} transferred **%{value} rETH** to %{to}!"
    },
    "price_update_event": {
        "title": ":moneybag: RPL Price Update",
        "description": "The RPL Price has been updated to **`%{value} RPL/ETH`!**\n\n**This will be the last update before the current Reward Period ends!**\nYou have until <t:%{rewardPeriodEnd}> (<t:%{rewardPeriodEnd}:R>) to ensure that you qualify for RPL rewards!"
    },
    "pool_deposit_assigned_event": {
        "title": ":rocket: Deposit Assigned To Minipools",
        "description_small": ":handshake: %{assignmentCount} Minipools have been matched and left the queue! %{transactionHash_small}"
    },
    "pool_deposit_recycled_event": {
        "title": ":recycle: Pool Deposit By Protocol Contract",
        "description_small": ":recycle: A Protocol Contract deposited **%{amount} ETH** into the Deposit Pool! %{transactionHash_small}"
    },
    "minipool_exit_event": {
        "title": ":leaves: Minipool Closed",
        "description": "Minipool %{minipool} has been flagged as Withdrawable!"
    },
    "minipool_withdrawal_processed_event": {
        "title": ":moneybag: Minipool Withdrawal",
        "description_small": ":moneybag: **%{totalAmount} ETH** has been distributed from Minipool %{minipool}, owned by Operator %{node}! %{transactionHash_small}"
    },
    "pool_deposit_event": {
        "title": ":rocket: Pool Deposit",
        "description": "**%{amount} ETH** deposited into the Deposit Pool!",
        "description_small": ":rocket: %{fancy_from} deposited **%{amount} ETH** into the Deposit Pool! %{transactionHash_small}"
    },
    "odao_rewards_snapshot_event": {
        "title": ":camera_with_flash: Reward Snapshot Published",
        "description": "Snapshot #%{rewardIndex} has been published by the oDAO!\nIt spans from <t:%{intervalStartTime}> till <t:%{intervalEndTime}>"
    },
    "odao_rewards_snapshot_submission_event": {
        "title": ":writing_hand: Reward Snapshot Submission Submitted",
        "description": "%{from} has published their submission for Snapshot #%{rewardIndex}"
    },
    "odao_proposal_add_event": {
        "title": ":bulb: oDAO Proposal Created",
        "description": "%{proposer} created proposal #%{proposalID}!\n```Description:\n%{message}```"
    },
    "odao_proposal_execute_event": {
        "title": ":white_check_mark: oDAO Proposal Executed",
        "description": "%{executer} executed proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "odao_proposal_vote_event": {
        "title": ":writing_hand: oDAO Vote",
        "description": "%{voter} voted %{decision} on proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "odao_proposal_cancel_event": {
        "title": ":no_entry_sign: oDAO Proposal Canceled",
        "description": "%{canceller} canceled proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "odao_member_join_event": {
        "title": ":new: oDAO Member Joined",
        "description": "%{nodeAddress} joined the oDAO with a Bond of %{rplBondAmount} RPL!"
    },
    "odao_member_leave_event": {
        "title": ":leaves: oDAO Member Left",
        "description": "%{nodeAddress} left the oDAO!"
    },
    "odao_member_kick_event": {
        "title": ":boot: oDAO Member Kicked",
        "description": "%{nodeAddress} was kicked from the oDAO!"
    },
    "sdao_proposal_add_event": {
        "title": ":bulb: Security Council Proposal Created",
        "description": "%{proposer} created proposal #%{proposalID}!\n```Description:\n%{message}```"
    },
    "sdao_proposal_execute_event": {
        "title": ":white_check_mark: Security Council Proposal Executed",
        "description": "%{executer} executed proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "sdao_proposal_vote_event": {
        "title": ":writing_hand: Security Council Vote",
        "description": "%{voter} voted %{decision} on proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "sdao_proposal_cancel_event": {
        "title": ":no_entry_sign: Security Council Proposal Canceled",
        "description": "%{canceller} canceled proposal #%{proposalID}!\n```Description:\n%{message}\n\nTotal Votes:\n%{vote_graph}```"
    },
    "sdao_member_join_event": {
        "title": ":new: Security Council Induction",
        "description": "%{nodeAddress} has joined the security council!"
    },
    "sdao_member_leave_event": {
        "title": ":leaves: Security Council Resignation",
        "description": "%{nodeAddress} has left the security council!"
    },
    "sdao_member_request_leave_event": {
        "title": ":leaves: Security Council Resignation Request",
        "description": "%{nodeAddress} has requested to leave the security council!"
    },
    "sdao_member_kick_event": {
        "title": ":boot: Security Council Expulsion",
        "description": "%{nodeAddress} has been kicked from the security council!"
    },
    "node_register_event": {
        "title": ":mailbox_with_mail: Node Registered",
        "description": "%{node} registered as a Node Operator!"
    },
    "rpl_inflation_event": {
        "title": ":chart_with_upwards_trend: RPL Inflation Occurred",
        "description": "%{value} new RPL minted! The new Total Supply is %{total_supply} RPL."
    },
    "milestone_rpl_stake": {
        "title": ":tada: Milestone Reached",
        "description": "%{result_value} RPL has been staked by Node Operators!"
    },
    "milestone_max_deposit_size": {
        "title": ":tada: Milestone Reached",
        "description": "The maximum deposit size has reached **%{result_value}** ETH!"
    },
    "milestone_reth_supply": {
        "title": ":tada: Milestone Reached",
        "description": "%{result_value} rETH has been issued!"
    },
    "milestone_staking_minipools": {
        "title": ":tada: Milestone Reached",
        "description": "%{result_value} Minipools have been created!"
    },
    "milestone_registered_nodes": {
        "title": ":tada: Milestone Reached",
        "description": "%{result_value} Nodes have been registered!"
    },
    "milestone_rpl_swapped": {
        "title": ":tada: Milestone Reached",
        "description": "%{result_value}% of all RPL has been exchanged for the new Version!"
    },
    "bootstrap_odao_member": {
        "title": ":satellite_orbital: oDAO Bootstrap Mode: Member Added",
        "description": "%{nodeAddress} added as a new oDAO Member!"
    },
    "bootstrap_odao_setting": {
        "title": ":satellite_orbital: oDAO Bootstrap Mode: Setting Modified",
        "description": "Setting `%{settingPath}` set to `%{value_raw}`!"
    },
    "bootstrap_odao_network_upgrade": {
        "title": ":satellite_orbital: oDAO Bootstrap Mode: Network Upgrade",
        "description": "%{description}"
    },
    "bootstrap_odao_disable": {
        "title": ":satellite_orbital: oDAO Bootstrap Mode: Disabled Bootstrap Mode",
        "description": "Bootstrap mode for the oDAO has been disabled!"
    },
    "bootstrap_pdao_multi_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Multiple Settings Modified",
        "description": "%{description}"
    },
    "bootstrap_pdao_setting_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Setting Modified",
        "description": "Setting `%{settingPath}` set to `%{value_raw}`!"
    },
    "bootstrap_pdao_claimer_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Changed Reward Distribution",
        "description": "%{description}"
    },
    "bootstrap_pdao_spend_treasury_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Spent Treasury",
        "description": "**%{amount} RPL** from treasury sent to %{recipientAddress}!"
    },
    "bootstrap_pdao_spend_treasury_recurring_new_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: New Recurring Treasury Spend",
        "description": "%{recipientAddress} will be awarded **%{numPeriods} x %{amountPerPeriod} RPL**!"
    },
    "bootstrap_pdao_spend_treasury_recurring_update_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Updated Recurring Treasury Spend",
        "description": "%{recipientAddress} will be awarded **%{numPeriods} x %{amountPerPeriod} RPL**!"
    },
    "bootstrap_pdao_disable_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Disabled Bootstrap Mode",
        "description": "Bootstrap mode for the pDAO has been disabled!"
    },
    "bootstrap_pdao_enable_governance_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Enable Governance",
        "description": "On-chain governance has been enabled!"
    },
    "bootstrap_sdao_member_invite_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Invited Security Council Member",
        "description": "`%{id}` (%{memberAddress}) has been invited to join the security council!"
    },
    "bootstrap_sdao_member_kick_event": {
        "title": ":satellite_orbital: pDAO Bootstrap Mode: Kicked Security Council Member",
        "description": "%{memberAddress} has been removed from the security council!"
    },
    "sdao_setting": {
        "title": ":lock: Security Council: Setting Modified",
        "description": "Setting `%{settingPath}` set to `%{value_raw}`!"
    },
    "minipool_scrub_event": {
        "title": ":rotating_light: Minipool Scrubbed",
        "description": "Minipool %{minipool} has been scrubbed likely due to having invalid withdrawal credentials on the beacon chain!"
    },
    "vacant_minipool_scrub_event": {
        "title": ":rotating_light: Vacant Minipool Scrubbed",
        "description": "Vacant Minipool %{minipool} has been scrubbed likely due to **%{scrub_reason}**!"
    },
    "minipool_scrub_vote_event": {
        "title": ":warning: Minipool Voted For Scrub",
        "description_small": ":warning: %{member} has voted to scrub Minipool %{minipool}! %{transactionHash_small}"
    },
    "vacant_minipool_scrub_vote_event": {
        "title": ":warning: Vacant Minipool Voted For Scrub",
        "description_small": ":warning: %{member} has voted to scrub Vacant Minipool %{minipool}! %{transactionHash_small}"
    },
    "node_rpl_slash_event": {
        "title": ":rotating_light: Node Operator Slashed",
        "description": "Node Operator %{node} has been slashed for **%{amount} RPL** (%{ethValue} ETH)!"
    },
    "minipool_penalty_updated": {
        "title": ":rotating_light: Minipool Penalty Updated",
        "description": "Minipool %{minipoolAddress} has had its Penalty increased to %{penalty_perc}%!"
    },
    "node_smoothing_pool_joined": {
        "title": ":cup_with_straw: Node Operator Joined Smoothing Pool",
        "description": "Node Operator %{node} joined the Smoothing Pool with their %{minipoolCount} Minipools!"
    },
    "node_smoothing_pool_left": {
        "title": ":leaves: Node Operator Left Smoothing Pool",
        "description": "Node Operator %{node} has left the Smoothing Pool with their %{minipoolCount} Minipools!"
    },
    "auction_lot_create_event": {
        "title": ":scales: Lot Created",
        "description": "%{by} created Lot #%{lotIndex}, which will auction off %{rplAmount} RPL!"
    },
    "auction_bid_event": {
        "title": ":scales: Bid On Lot",
        "description": "%{by} bid %{bidAmount} ETH for %{rplAmount} RPL on Lot #%{lotIndex}!"
    },
    "auction_rpl_recover_event": {
        "title": ":scales: RPL Recovered From Lot",
        "description": "%{rplAmount} RPL recovered from Lot #%{lotIndex}!"
    },
    "minipool_prestake_event": {
        "title": ":construction_site: Minipool Initial Deposit",
        "description": "Minipool %{minipool_clean} has deposited its initial 16 ETH to the Beacon Chain!"
    },
    "minipool_deposit_received_event": {
        "title": ":construction_site: Minipool Created",
        "description": "Minipool %{minipool_clean} has been created with an operator share of **%{depositAmount} ETH**!"
    },
    "minipool_deposit_received_event_credit": {
        "title": ":magic_wand: Minipool Created Using Credit",
        "description": "Minipool %{minipool_clean} has been created with an operator share of **%{depositAmount} ETH**!\n**%{creditAmount} ETH** worth of Credit used for this deposit!"
    },
    "minipool_bond_reduction_started_event": {
        "title": ":magic_wand: Minipool Bond Reduction Initiated",
        "description_small": ":compression: %{node} initiated a bond reduction for their minipool %{minipool_clean} from **%{previousBondAmount} ETH** to **%{newBondAmount} ETH**! %{transactionHash_small}"
    },
    "minipool_bond_reduce_event": {
        "title": ":magic_wand: Minipool Bond Reduced",
        "description_small": ":magic_wand: %{node} reduced the bond of their minipool %{minipool_clean} from **%{previousBondAmount} ETH** to **%{newBondAmount} ETH**! %{transactionHash_small}"
    },
    "minipool_vote_against_bond_reduction_event": {
        "title": ":warning: Voted Against Bond Reduction",
        "description_small": "%{member} has voted against the bond reduction of Minipool %{minipool}!"
    },
    "minipool_bond_reduction_cancelled_event": {
        "title": ":rotating_light: Bond Reduction Cancelled",
        "description": "Minipool %{minipool} has been denied the ability to reduce its bond!"
    },
    "mev_proposal_event": {
        "title": ":moneybag: Large Minipool Proposal",
        "description": "Minipool %{minipool} has proposed a Block worth **%{reward_amount} ETH**!"
    },
    "mev_proposal_smoothie_event": {
        "title": ":cup_with_straw: Large Smoothing Pool Proposal",
        "description": "Minipool %{minipool} has proposed a Block worth **%{reward_amount} ETH**!"
    },
    "minipool_vacancy_prepared_event": {
        "title": ":link: Solo Migration Initiated",
        "description": "Migration of solo validator %{pubkey} to Minipool %{minipool} with a bond of **%{bondAmount} ETH** was initiated!"
    },
    "minipool_failed_deposit": {
        "title": ":fire: Failed Minipool Deposit",
        "description": ":fire_engine: %{node} burned **%{burnedValue} ETH** trying to create a minipool! :fire_engine:"
    },
    "minipool_slash_event": {
        "title": ":rotating_light: Minipool Slashed",
        "description": "Minipool %{minipool} has been slashed by %{slasher}"
    },
    "otc_swap_event": {
        "title": ":currency_exchange: OTC Swap",
        "description": "%{seller_clean} exchanged %{sellAmount} %{sellToken} for %{buyAmount} %{buyToken} with %{buyer_clean}"
    },
    "odao_member_challenge_event": {
        "title": ":rotating_light: oDAO Member Challenge Started",
        "description": "%{nodeChallengedAddress_clean} has been challenged by %{nodeChallengerAddress_clean}!\nThey have to respond before %{challengeDeadline} or they will be kicked from the oDAO!"
    },
    "odao_member_challenge_accepted_event": {
        "title": ":warning: oDAO Member Challenge Passed",
        "description": "%{nodeChallengedAddress_clean} has been successfully challenged!\nTheir bond of %{rplBondAmount} RPL has been burned and they have been kicked out of the oDAO!"
    },
    "odao_member_challenge_rejected_event": {
        "title": ":no_entry_sign: oDAO Member Challenge Rejected",
        "description": "%{nodeChallengedAddress_clean} has responded to the challenge, making it invalid!"
    },
    "deposit_pool_queue_clear_full": {
        "title": ":tada: Deposit Pool Queue Clear",
        "description": "%{node} cleared %{count} Minipools from the Deposit Pool Queue!"
    },
    "deposit_pool_queue_clear_partial": {
        "title": ":tada: Partial Deposit Pool Queue Clear",
        "description": "%{node} cleared %{count} Minipools from the Deposit Pool Queue!"
    },
    "odao_minipool_penalty_updated": {
        "title": ":rotating_light: Minipool Penalty",
        "description": "The Maximum Minipool Penalty Rate has been raised to %{rate_perc}%!"
    },
    "redstone_upgrade_triggered": {
        "title": ":tada: Redstone Upgrade Complete!",
        "description": ""
    },
    "atlas_upgrade_triggered": {
        "title": ":tada: Atlas Upgrade Complete!",
        "description": ""
    },
    "houston_upgrade_triggered": {
        "title": ":tada: Houston Upgrade Complete!",
        "description": ""
    },
    "unsteth_withdrawal_requested_event": {
        "title": ":money_with_wings: Large stETH Withdrawal Requested",
        "description": "%{owner} has requested a withdrawal of **%{amountOfStETH} stETH**!"
    },
    "cow_order_buy_rpl_found": {
        "title": ":cow: BUY Order Found",
        "description": "%{cow_owner} has placed a buy order for %{ourAmount} RPL!\n Exchanging %{otherAmount} %{otherToken} for %{ourAmount} RPL (%{ratioAmount} RPL/%{otherToken})\nExpires: %{deadline}"
    },
    "cow_order_buy_reth_found": {
        "title": ":cow: rETH Order Found",
        "description": "%{cow_owner} has placed a buy order for %{ourAmount} rETH!\n Exchanging %{otherAmount} %{otherToken} for %{ourAmount} rETH (%{ratioAmount} rETH/%{otherToken})\nExpires: %{deadline}"
    },
    "cow_order_sell_rpl_found": {
        "title": ":cow: SELL Order Found",
        "description": "%{cow_owner} has placed a sell order for %{ourAmount} RPL!\n Exchanging %{ourAmount} RPL for %{otherAmount} %{otherToken} (%{ratioAmount} RPL/%{otherToken})\nExpires: %{deadline}"
    },
    "cow_order_sell_reth_found": {
        "title": ":cow: rETH Order Found",
        "description": "%{cow_owner} has placed a sell order for %{ourAmount} rETH!\n Exchanging %{ourAmount} rETH for %{otherAmount} %{otherToken} (%{ratioAmount} rETH/%{otherToken})\nExpires: %{deadline}"
    },
    "finality_delay_event": {
        "title": ":warning: Finality Delay On Beacon Chain",
        "description": "Finality has been delayed for **%{finality_delay} Epochs** on the Beacon Chain!\n\nPlease make sure that your node is operating correctly to minimize inactivity leak! **Every attestation counts!**"
    },
    "finality_delay_recover_event": {
        "title": ":tada: Finality Recovered",
        "description": "Finality has been recovered on the Beacon Chain!"
    }
}
